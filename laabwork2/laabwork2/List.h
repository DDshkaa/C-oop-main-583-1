#include "ListItem.h"

//! \brief Инициализирует двусвязный список.
//! \param list Ссылка на список, который нужно инициализировать.
void initializeList(List& list);

//! \brief Удаляет элемент из двусвязного списка.
//! \param list Ссылка на список, из которого удаляется элемент.
//! \param value Значение элемента, который нужно удалить.
void removeElement(List& list, int value);

//! \brief Вставляет элемент в начало двусвязного списка.
//! \param list Ссылка на список, в который вставляется элемент.
//! \param value Значение элемента, который нужно вставить.
void insertAtBeginning(List& list, int value);

//! \brief Вставляет элемент в конец двусвязного списка.
//! \param list Ссылка на список, в который вставляется элемент.
//! \param value Значение элемента, который нужно вставить.
void insertAtEnd(List& list, int value);

//! \brief Вставляет элемент после заданного значения в двусвязном списке.
//! \param list Ссылка на список, в который вставляется элемент.
//! \param afterValue Значение элемента, после которого нужно вставить новый элемент.
//! \param value Значение нового элемента, который нужно вставить.
void insertAfter(List& list, int afterValue, int value);

//! \brief Вставляет элемент перед заданным значением в двусвязном списке.
//! \param list Ссылка на список, в который вставляется элемент.
//! \param beforeValue Значение элемента, перед которым нужно вставить новый элемент.
//! \param value Значение нового элемента, который нужно вставить.
void insertBefore(List& list, int beforeValue, int value);

//! \brief Сортирует двусвязный список.
//! \param list Ссылка на список, который нужно отсортировать.
void sortList(List& list);

//! \brief Выполняет линейный поиск значения в двусвязном списке.
//! \param list Ссылка на список, в котором выполняется поиск.
//! \param value Значение, которое нужно найти.
//! \return Указатель на узел с найденным значением или nullptr, если значение не найдено.
Node* linearSearch(List& list, int value);

//! \brief Печатает элементы двусвязного списка.
//! \param list Константная ссылка на список, элементы которого нужно напечатать.
void printList(const List& list);

//! \brief Освобождает память, занятую двусвязным списком.
//! \param list Ссылка на список, память которого нужно освободить.
void cleanup(List& list);

