#pragma once
#include "BinaryTreeNode.h"

/*
 * @brief Представляет структуру бинарного дерева поиска.
 * Эта структура содержит указатель на корневой узел бинарного дерева поиска.
 */
struct BinarySearchTree
{
    //< Указатель на корневой узел бинарного дерева поиска.
    BinaryTreeNode* Root;
};

/*
 * @brief Создает и инициализирует новое бинарное дерево поиска.
 *
 * Эта функция выделяет память для нового бинарного дерева поиска и устанавливает его корень в nullptr.
 *
 * @return Указатель на созданное бинарное дерево поиска или nullptr в случае ошибки.
 */
BinarySearchTree* CreateTree();

/*
 * @brief Вставляет новое значение в бинарное дерево.
 *
 * Эта функция рекурсивно вставляет новое значение в правильное место в бинарном дереве.
 *
 * @param binaryTree Указатель на текущий узел в бинарном дереве.
 * @param data Данные, которые необходимо вставить в дерево.
 * @return Указатель на обновленный узел бинарного дерева.
 */
void Insert(BinarySearchTree* binaryTree, int data);

/*
 * @brief Ищет значение в бинарном дереве.
 *
 * Эта функция рекурсивно ищет значение в бинарном дереве и возвращает соответствующий узел, если найден.
 *
 * @param binaryTree Указатель на текущий узел в бинарном дереве.
 * @param data Данные, которые необходимо найти.
 * @return Указатель на найденный узел или nullptr, если не найден.
 */
BinaryTreeNode* Search(BinarySearchTree* binaryTree, int data);

/*
 * @brief Находит максимальное значение в бинарном дереве.
 *
 * Эта функция проходит к правому самому узлу, чтобы найти максимальное значение.
 *
 * @param binaryTree Указатель на текущий узел в бинарном дереве.
 * @return Указатель на узел, содержащий максимальное значение.
 */
BinarySearchTree* FindMaxValue(BinarySearchTree* binaryTree);

/*
 * @brief Находит минимальное значение в бинарном дереве.
 *
 * Эта функция проходит к левому самому узлу, чтобы найти минимальное значение.
 *
 * @param binaryTree Указатель на текущий узел в бинарном дереве.
 * @return Указатель на узел, содержащий минимальное значение.
 */
BinarySearchTree* FindMinValue(BinarySearchTree* binaryTree);

/*
 * @brief Удаляет узел с указанным значением из бинарного дерева.
 *
 * Эта функция рекурсивно находит и удаляет узел с указанным значением из бинарного дерева.
 *
 * @param binaryTree Указатель на текущий узел в бинарном дереве.
 * @param data Данные узла, который необходимо удалить.
 * @return Указатель на обновленный узел бинарного дерева.
 */
BinarySearchTree* DeleteNode(BinarySearchTree* binaryTree, int data);

/*
 * @brief Очищает бинарное дерево.
 *
 * Эта функция рекурсивно освобождает память в бинарном дереве.
 *
 * @param binaryTree Указатель на бинарное дерево.
 */
void ClearTree(BinarySearchTree* binaryTree);


/*
 * @brief Удаляет узел с указанным значением из бинарного дерева.
 *
 * Эта функция рекурсивно находит и удаляет узел с указанным значением из бинарного дерева.
 *
 * @param node Указатель на текущий узел в бинарном дереве.
 * @param data Данные узла, который необходимо удалить.
 * @return Указатель на обновленный узел бинарного дерева.
 */
BinaryTreeNode* DeleteNodeHelper(BinaryTreeNode* node, int data);

/*
 * @brief Помощь в поиске минимального значения в дереве.
 *
 * Эта функция проходит к левому самому узлу, чтобы найти минимальное значение.
 *
 * @param binaryTree Указатель на текущий узел в бинарном дереве.
 * @return Указатель на узел, содержащий минимальное значение.
 */
BinaryTreeNode* FindMinValueHelper(BinaryTreeNode* node);

/*
 * @brief Очищает узлы в бинарном дереве.
 *
 * Эта функция рекурсивно освобождает память в бинарном дереве.
 *
 * @param binaryTree Указатель на узел в бинарном дереве.
 */
void ClearNodes(BinaryTreeNode* node);
