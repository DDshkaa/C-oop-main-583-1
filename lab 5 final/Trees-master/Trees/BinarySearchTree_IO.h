#pragma once
using namespace std;

/*
 * @brief Выполняет предварительный обход бинарного дерева.
 *
 * Эта функция сначала посещает текущий узел, затем рекурсивно посещает левое и правое поддеревья.
 *
 * @param node Указатель на текущий узел в бинарном дереве.
 */
void PreOrder(BinaryTreeNode* node);

/*
 * @brief Выполняет симметричный обход бинарного дерева.
 *
 * Эта функция рекурсивно посещает левое поддерево, затем текущий узел и, наконец, правое поддерево.
 *
 * @param node Указатель на текущий узел в бинарном дереве.
 */
void InOrder(BinaryTreeNode* node);

/*
 * @brief Выполняет постордерный обход бинарного дерева.
 *
 * Эта функция рекурсивно посещает левое и правое поддеревья перед тем, как посетить текущий узел.
 *
 * @param node Указатель на текущий узел в бинарном дереве.
 */
void PostOrder(BinaryTreeNode* node);

/*
 * @brief Выполняет обход бинарного дерева по уровням.
 *
 * Эта функция посещает узлы уровень за уровнем, сверху вниз и слева направо.
 *
 * @param root Указатель на корневой узел бинарного дерева.
 */
void LevelOrder(BinaryTreeNode* root);

/*
 * @brief Печатает бинарное дерево в структурированном формате.
 *
 * Эта функция отображает бинарное дерево с отступами для визуального представления его структуры.
 *
 * @param node Указатель на текущий узел в бинарном дереве.
 * @param indent Уровень отступа для печати текущего узла.
 */
void PrintBinaryTree(BinaryTreeNode* node, int indent);

/*
 * @brief Отображает меню операций с бинарным деревом.
 *
 * Эта функция представляет меню пользователю для выбора различных операций над бинарным деревом.
 */
void ShowBinaryTreeMenu();

/*
 * @brief Обрабатывает выбор пользователя для операций с бинарным деревом.
 *
 * Эта функция обрабатывает ввод пользователя и выполняет соответствующую операцию на заданном бинарном дереве поиска.
 *
 * @param binaryTree Указатель на бинарное дерево поиска, над которым будут выполняться операции.
 */
void BinaryTreeChoice(BinarySearchTree* binaryTree);
